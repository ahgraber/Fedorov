dm$generate()
# add interaction
dm$add_interaction(n1="dia", n2="a1c", l1=0, l2=3, eq=F) # nondiabetics can't have high a1c
dm$add_interaction(n1="dia", n2="a1c", l1=1, l2=0, eq=F) # diabetics can't have low a1c
dm$X
dm$islacks
### generate candidate set
library(AlgDesign)
system.time(
candidate_set <- gen.factorial(dm$levels, factors="all")
# full 16-attribute candidate_set generation takes ~3 minutes on fast computer
)
# bkup <- candidate_set
# convert to numeric matrix
indx <- sapply(candidate_set, is.factor)
candidate_set[,indx] <- lapply(candidate_set[,indx], function(x) as.numeric(as.character(x)))
candidate_set <- as.matrix(candidate_set)
# zero base
candidate_set <- candidate_set-1
# # randomly choose 1% of rows for proof of concept
# indx <- as.numeric(sample(candidate_set, nrow(candidate_set)*.01))
# candidate_set <- candidate_set[indx,]
# rm(indx)
#
# initial optimality
doptimality(dm, dm$X, lambda=lambda)
### test optimality
system.time(
X <- fedorov(dm, candidate_set, n, lambda=lambda)
)
X
doptimality(dm, X, lambda=lambda)
sumfisherz(dm, X)
#
# ### test optimality (parallelized)
# system.time(
#   X <- fedorovpar(dm, candidate_set, n, lambda=lambda)
# )
# # notes: throws error trying to pass the DesignMatrix object.  Might be error in foreach package?
# X
# doptimality(dm, X, lambda=lambda)
# sumfisherz(dm, X)
here <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(here,"FedorovDesignClass.R",sep="/")) # ignore error
source(paste(here,"Fedorov.R",sep="/"))
# how many patients?
n <- 8 # toy problem
# how to penalize slacks?
lambda = 1
### create DesignMatrix object
dm <- design(n=n)
# create attributes
dm$add_attribute(name="age", levels=3, dist=c(25,50,25))
dm$add_attribute(name="gender", levels=2, dist=c(50,50))
dm$add_attribute(name="bmi", levels=3, dist=c(20,40,40))
dm$add_attribute(name="race", levels=4, dist=c(40,20,20,20))
dm$add_attribute(name="dia", levels=2, dist=c(50,50))
dm$add_attribute(name="strk", levels=2, dist=c(75,25))
dm$add_attribute(name="angn", levels=3, dist=c(50,25,25))
dm$add_attribute(name="ldl", levels=3, dist=c(25,50,25))
dm$add_attribute(name="bp", levels=3, dist=c(25,50,25))
dm$add_attribute(name="a1c", levels=4, dist=c(25,25,25,25))
dm$add_attribute(name="ren", levels=3, dist=c(50,25,25))
dm$add_attribute(name="srcl", levels=3, dist=c(50,25,25))
dm$add_attribute(name="uacr", levels=3, dist=c(33,33,34))
dm$add_attribute(name="ptx", levels=4, dist=c(25,25,25,25))
dm$add_attribute(name="hist", levels=3, dist=c(50,25,25))
dm$add_attribute(name="smk", levels=3, dist=c(50,25,25))
# generate
dm$generate()
# add interaction
dm$add_interaction(n1="dia", n2="a1c", l1=0, l2=3, eq=F) # nondiabetics can't have high a1c
dm$add_interaction(n1="dia", n2="a1c", l1=1, l2=0, eq=F) # diabetics can't have low a1c
dm$X
dm$islacks
### generate candidate set
library(AlgDesign)
system.time(
candidate_set <- gen.factorial(dm$levels, factors="all")
# full 16-attribute candidate_set generation takes ~3 minutes on fast computer
)
install.packages("AlgDesign")
### generate candidate set
library(AlgDesign)
system.time(
candidate_set <- gen.factorial(dm$levels, factors="all")
# full 16-attribute candidate_set generation takes ~3 minutes on fast computer
)
# convert to numeric matrix
indx <- sapply(candidate_set, is.factor)
candidate_set[,indx] <- lapply(candidate_set[,indx], function(x) as.numeric(as.character(x)))
candidate_set <- as.matrix(candidate_set)
# zero base
candidate_set <- candidate_set-1
# initial optimality
doptimality(dm, dm$X, lambda=lambda)
### test optimality
system.time(
X <- fedorov(dm, candidate_set, n, lambda=lambda)
)
X
here <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(here,"FedorovDesignClass.R",sep="/")) # ignore error
# source(paste(here,"FedorovGA.R",sep="/"))
source(paste(here,"FedorovGAparallel.R",sep="/"))
# how many patients?
# n <- 8 # toy problem
n <- 50
# how to penalize slacks?
lambda = 1
# create DesignMatrix object
dm <- design(n=n)
# create attributes
dm$add_attribute(name="age", levels=3, dist=c(25,50,25))
dm$add_attribute(name="gender", levels=2, dist=c(50,50))
dm$add_attribute(name="bmi", levels=3, dist=c(20,40,40))
dm$add_attribute(name="race", levels=4, dist=c(40,20,20,20))
dm$add_attribute(name="dia", levels=2, dist=c(50,50))
dm$add_attribute(name="strk", levels=2, dist=c(75,25))
dm$add_attribute(name="angn", levels=3, dist=c(50,25,25))
dm$add_attribute(name="ldl", levels=3, dist=c(25,50,25))
dm$add_attribute(name="bp", levels=3, dist=c(25,50,25))
dm$add_attribute(name="a1c", levels=4, dist=c(25,25,25,25))
dm$add_attribute(name="ren", levels=3, dist=c(50,25,25))
dm$add_attribute(name="srcl", levels=3, dist=c(50,25,25))
dm$add_attribute(name="uacr", levels=3, dist=c(33,33,34))
dm$add_attribute(name="ptx", levels=4, dist=c(25,25,25,25))
dm$add_attribute(name="hist", levels=3, dist=c(50,25,25))
dm$add_attribute(name="smk", levels=3, dist=c(50,25,25))
# generate
dm$generate()
# add interaction
dm$add_interaction(n1="dia", n2="a1c", l1=0, l2=3, eq=F) # nondiabetics can't have high a1c
dm$add_interaction(n1="dia", n2="a1c", l1=1, l2=0, eq=F) # diabetics can't have low a1c
dm$X
dm$islacks
# initial optimality
doptimality(dm, dm$X, lambda=lambda)
# test optimality
system.time(
X <- gen_alg(dm, pop=100, gens=1000, test="doptimality", lambda=lambda)
)
warnings()
# how many patients?
n <- 8
# create DesignMatrix object
dm <- design(n=n)
# create attributes
dm$add_attribute(name="age", levels=3, dist=c(25,50,25))
dm$add_attribute(name="sex", levels=2, dist=c(50,50))
dm$add_attribute(name="bmi", levels=3, dist=c(33,33,34))
# generate
dm$generate()
# view attributes of dm
dm$names
dm$values
dm$X
# test optimality
doptimality(dm, dm$X)
dm$islacks
dm$dslacks
a = matrix(c(1, 0, 0, 1), nrow=2)
b = matrix(c(4, 1, 2, 2), nrow=2)
a
b
a %*% b
a = matrix(c(1, 0, 0, 1), nrow=2, byrow = T)
b = matrix(c(4, 1, 2, 2), nrow=2, byrow = T)
a %*% b
here <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(here,"FedorovDesignClass.R",sep="/")) # ignore error
source(paste(here,"Fedorov.R",sep="/"))
# source(paste(here,"FedorovGA.R",sep="/"))
source(paste(here,"FedorovGAparallel.R",sep="/"))
# how many patients?
n <- 8
# create DesignMatrix object
dm <- design(n=n)
# create attributes
dm$add_attribute(name="age", levels=3, dist=c(25,50,25))
dm$add_attribute(name="sex", levels=2, dist=c(50,50))
dm$add_attribute(name="bmi", levels=3, dist=c(33,33,34))
# generate
dm$generate()
# add interacts
dm$add_interaction(n1="age", n2="sex", l1=1, l2=1, kind=T)
dm$add_interaction("age","bmi",0,2,F)
# view attributes of dm
dm$names
dm$values
dm$islacks
dm$dslacks
dm$X
# test optimality
doptimality(dm, dm$X)
# add interacts
dm$add_interaction(n1="age", n2="sex", l1=1, l2=1, eq=T)
source(paste(here,"FedorovDesignClass.R",sep="/")) # ignore error
source(paste(here,"Fedorov.R",sep="/"))
# source(paste(here,"FedorovGA.R",sep="/"))
source(paste(here,"FedorovGAparallel.R",sep="/"))
# how many patients?
n <- 8
# create DesignMatrix object
dm <- design(n=n)
# create attributes
dm$add_attribute(name="age", levels=3, dist=c(25,50,25))
dm$add_attribute(name="sex", levels=2, dist=c(50,50))
dm$add_attribute(name="bmi", levels=3, dist=c(33,33,34))
# generate
dm$generate()
# generate
dm$generate_design()
# add interacts
dm$add_interaction(n1="age", n2="sex", l1=1, l2=1, eq=T)
dm$add_interaction("age","bmi",0,2,F)
# view attributes of dm
dm$names
dm$values
dm$islacks
dm$dslacks
dm$X
# test optimality
doptimality(dm, dm$X)
X <- gen_alg(dm, pop=50, gens=1000, test='doptimality')
here <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(here,"FedorovDesignClass.R",sep="/")) # ignore error
source(paste(here,"Fedorov.R",sep="/"))
# source(paste(here,"FedorovGA.R",sep="/"))
source(paste(here,"FedorovGAparallel.R",sep="/"))
# how many patients?
n <- 8
# create DesignMatrix object
dm <- design(n=n)
# create attributes
dm$add_attribute(name="age", levels=3, dist=c(25,50,25))
dm$add_attribute(name="sex", levels=2, dist=c(50,50))
dm$add_attribute(name="bmi", levels=3, dist=c(33,33,34))
# generate
dm$generate_design()
# add interacts
dm$add_interaction(n1="age", n2="sex", l1=1, l2=1, eq=T)
dm$add_interaction("age","bmi",0,2,F)
# view attributes of dm
dm$names
dm$values
dm$islacks
dm$dslacks
dm$X
# test optimality
doptimality(dm, dm$X)
X <- gen_alg(dm, pop=50, gens=1000, test='doptimality')
here <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(here,"FedorovDesignClass.R",sep="/")) # ignore error
source(paste(here,"Fedorov.R",sep="/"))
source(paste(here,"FedorovGA.R",sep="/"))
# how many patients?
n <- 8
# create DesignMatrix object
dm <- design(n=n)
# create attributes
dm$add_attribute(name="age", levels=3, dist=c(25,50,25))
# create attributes
dm$add_attribute(name="age", levels=3, dist=c(25,50,25))
dm$add_attribute(name="sex", levels=2, dist=c(50,50))
dm$add_attribute(name="bmi", levels=3, dist=c(33,33,34))
# generate
dm$generate_design()
# add interacts
dm$add_interaction(n1="age", n2="sex", l1=1, l2=1, eq=T)
dm$add_interaction("age","bmi",0,2,F)
# view attributes of dm
dm$names
dm$values
dm$islacks
dm$dslacks
dm$X
# test optimality
doptimality(dm, dm$X)
X <- gen_alg(dm, pop=50, gens=1000, test='doptimality')
here <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(here,"FedorovDesignClass.R",sep="/")) # ignore error
source(paste(here,"Fedorov.R",sep="/"))
source(paste(here,"FedorovGA.R",sep="/"))
# how many patients?
n <- 8
# create DesignMatrix object
dm <- design(n=n)
# create attributes
dm$add_attribute(name="age", levels=3, dist=c(25,50,25))
dm$add_attribute(name="sex", levels=2, dist=c(50,50))
dm$add_attribute(name="bmi", levels=3, dist=c(33,33,34))
# generate
dm$generate_design()
# add interacts
dm$add_interaction(n1="age", n2="sex", l1=1, l2=1, eq=T)
dm$add_interaction("age","bmi",0,2,F)
# view attributes of dm
dm$names
dm$values
dm$islacks
dm$dslacks
dm$X
# test optimality
doptimality(dm, dm$X)
X <- gen_alg(dm, pop=50, gens=1000, test='doptimality')
X
doptimality(dm, X)
doptimality(dm, dm$X)
dm$X <- X
doptimality(dm, X[1])
doptimality(dm, X[2])
X
X[[2]]
doptimality(dm, X)
doptimality(dm, X[[2]])
##### with federov algo ###############
### generate candidate set
library(AlgDesign)
system.time(
candidate_set <- gen.factorial(dm$levels, factors="all")
# full 16-attribute candidate_set generation takes ~3 minutes on fast computer
)
# convert to numeric matrix
indx <- sapply(candidate_set, is.factor)
candidate_set[,indx] <- lapply(candidate_set[,indx], function(x) as.numeric(as.character(x)))
candidate_set <- as.matrix(candidate_set)
# zero base
candidate_set <- candidate_set-1
# initial optimality
doptimality(dm, dm$X, lambda=lambda)
# initial optimality
doptimality(dm, dm$X, lambda=1)
### test optimality
system.time(
X <- fedorov(dm, candidate_set, n, lambda=lambda)
)
### test optimality
system.time(
X <- fedorov(dm, candidate_set, n, lambda=1)
)
X
doptimality(dm, X, lambda=lambda)
here <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(here,"FedorovDesignClass.R",sep="/")) # ignore error
source(paste(here,"Fedorov.R",sep="/"))
source(paste(here,"FedorovGA.R",sep="/"))
source(paste(here,"FedorovDesignClass.R",sep="/")) # ignore error
source(paste(here,"Fedorov.R",sep="/"))
source(paste(here,"FedorovGA.R",sep="/"))
# how many patients?
n <- 8
# create DesignMatrix object
dm <- design(n=n)
# create attributes
dm$add_attribute(name="body", levels=3, dist=c(25,50,25))
dm$add_attribute(name="engine", levels=2, dist=c(50,50))
dm$add_attribute(name="seats", levels=4, dist=c(25,25,25,25))
# generate
dm$generate_design()
# add interacts
dm$add_interaction(n1="body", n2="seats", l1=0, l2=3, eq=F)
dm$add_interaction("body","seats",1,0,F)
# set penalty
lmda <- 1
# view attributes of dm
dm$names
dm$values
dm$islacks
dm$dslacks
dm$X
dm$dslacks
dm$X
# test optimality
doptimality(dm, dm$X, lambda=lmda)
oldX <- dm$X
## -- FEDOROV --------------------------------------------
system.time(
gaX <- gen_alg(dm, pop=50, gens=1000, test='doptimality', lambda=lmda)
)
gaX
## -- FEDOROV --------------------------------------------
dm$X <- oldX
doptimality(dm, dm$X, lambda=lmda)
### test optimality
system.time(
fX <- fedorov(dm, candidate_set, n, lambda=lmda)
)
### generate candidate set
library(AlgDesign)
system.time(
candidate_set <- gen.factorial(dm$levels, factors="all")
# full 16-attribute candidate_set generation takes ~3 minutes on fast computer
)
# convert to numeric matrix
indx <- sapply(candidate_set, is.factor)
candidate_set[,indx] <- lapply(candidate_set[,indx], function(x) as.numeric(as.character(x)))
candidate_set <- as.matrix(candidate_set)
# zero base
candidate_set <- candidate_set-1
### test optimality
system.time(
fX <- fedorov(dm, candidate_set, n, lambda=lmda)
)
fX
doptimality(dm, fX, lambda=lmda)
## -- FEDOROV --------------------------------------------
dm$X <- oldX
### test optimality
system.time(
fX <- fedorov(dm, candidate_set, n, lambda=lmda)
)
fX
doptimality(dm, fX, lambda=lmda)
## -- FEDOROV --------------------------------------------
dm$X <- oldX
doptimality(dm, dm$X, lambda=5)
### generate candidate set
system.time(
candidate_set <- AlgDesign::gen.factorial(dm$levels, factors="all")
# full 16-attribute candidate_set generation takes ~3 minutes on fast computer
)
# convert to numeric matrix
indx <- sapply(candidate_set, is.factor)
candidate_set[,indx] <- lapply(candidate_set[,indx], function(x) as.numeric(as.character(x)))
candidate_set <- as.matrix(candidate_set)
# zero base
candidate_set <- candidate_set-1
### test optimality
system.time(
fX <- fedorov(dm, candidate_set, n, lambda=lmda)
)
fX
here <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(here,"FedorovDesignClass.R",sep="/")) # ignore error
source(paste(here,"Fedorov.R",sep="/"))
source(paste(here,"FedorovGA.R",sep="/"))
# how many patients?
n <- 8
# create DesignMatrix object
dm <- design(n=n)
# create attributes
dm$add_attribute(name="body", levels=3, dist=c(25,50,25))
dm$add_attribute(name="engine", levels=2, dist=c(50,50))
dm$add_attribute(name="seats", levels=4, dist=c(25,25,25,25))
# generate
dm$generate_design()
# add interacts
dm$add_interaction(n1="body", n2="seats", l1=0, l2=3, eq=F)
dm$add_interaction("body","seats",1,0,F)
# set penalty
lmda <- 1
# view attributes of dm
dm$names
dm$values
dm$islacks
dm$dslacks
dm$X
# preserve design matrix for testing
oldX <- dm$X
# test optimality
doptimality(dm, dm$X, lambda=lmda)
## -- GENETIC --------------------------------------------
system.time(
gaX <- gen_alg(dm, pop=50, gens=1000, test='doptimality', lambda=lmda)
)
gaX
## -- FEDOROV --------------------------------------------
dm$X <- oldX
doptimality(dm, dm$X, lambda=5)
### generate candidate set
system.time(
candidate_set <- AlgDesign::gen.factorial(dm$levels, factors="all")
# full 16-attribute candidate_set generation takes ~3 minutes on fast computer
)
doptimality(dm, dm$X, lambda=lmda)
### generate candidate set
system.time(
candidate_set <- AlgDesign::gen.factorial(dm$levels, factors="all")
# full 16-attribute candidate_set generation takes ~3 minutes on fast computer
)
# convert to numeric matrix
indx <- sapply(candidate_set, is.factor)
candidate_set[,indx] <- lapply(candidate_set[,indx], function(x) as.numeric(as.character(x)))
candidate_set <- as.matrix(candidate_set)
# zero base
candidate_set <- candidate_set-1
### test optimality
system.time(
fX <- fedorov(dm, candidate_set, n, lambda=lmda)
)
fX
doptimality(dm, fX, lambda=lmda)
doptimality(dm, dm$X, lambda=lmda)
dm$X
doptimality(dm, dm$X, lambda=lmda)
### test optimality
system.time(
fX <- fedorov(dm, candidate_set, n, lambda=.25)
)
### test optimality
system.time(
fX <- fedorov(dm, candidate_set, n, lambda=.25)
)
## -- FEDOROV --------------------------------------------
dm$X <- oldX
### test optimality
system.time(
fX <- fedorov(dm, candidate_set, n, lambda=.25)
)
fX
dm$X
